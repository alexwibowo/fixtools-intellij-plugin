package com.wibowo.fixtools.intellij.ui;

import com.intellij.icons.AllIcons;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.ui.table.JBTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import com.wibowo.fixtools.intellij.model.Dictionary;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Set;

public class ApplicationSettingsForm {
    private static final Logger LOGGER = Logger.getInstance(ApplicationSettingsForm.class);

    private JPanel panel1;
    private JButton addButton;
    private JButton removeButton;
    private JBTable dictionaryTable;
    private JPanel buttonPanel;

    public ApplicationSettingsForm() {

        final AddDictionaryAction addDictionaryAction = new AddDictionaryAction();
        addDictionaryAction.setEnabled(true);
        addButton.setAction(addDictionaryAction);

        final RemoveDictionaryAction removeDictionaryAction = new RemoveDictionaryAction();
        removeDictionaryAction.setEnabled(false);
        removeButton.setAction(removeDictionaryAction);

        final DictionaryTableModel dictionaryTableModel = new DictionaryTableModel();
        dictionaryTableModel.addColumn("Alias");
        dictionaryTableModel.addColumn("Path");
        dictionaryTable.setModel(dictionaryTableModel);

        // Only allow single selection at a time, and enable/disable remove button when user has selected a row
        dictionaryTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dictionaryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (dictionaryTable.getSelectedRow() != -1) {
                    removeDictionaryAction.setEnabled(true);
                } else {
                    removeDictionaryAction.setEnabled(false);
                }
            }
        });
    }

    public Set<Dictionary> getDictionaries() {
        return getDictionaryTableModel().getDictionaries();
    }

    private DictionaryTableModel getDictionaryTableModel() {
        return (DictionaryTableModel) dictionaryTable.getModel();
    }

    public void setDictionaries(final Set<Dictionary> dictionaries) {
        final DictionaryTableModel dictionaryTableModel = getDictionaryTableModel();
        dictionaryTableModel.setDictionaries(dictionaries);

    }

    public JPanel getContentPane() {
        return panel1;
    }


    /**
     * Displays {@link RegisterDictionaryDialog}
     */
    private class AddDictionaryAction extends AbstractAction {
        public AddDictionaryAction() {
            super("Add", AllIcons.General.Add);
        }

        @Override
        public void actionPerformed(final ActionEvent e) {
            final RegisterDictionaryDialog registerDictionaryDialog = new RegisterDictionaryDialog(dictionary -> {
                LOGGER.info("Adding new dictionary to the table model " + dictionary);
                final DictionaryTableModel dictionaryTableModel = getDictionaryTableModel();
                dictionaryTableModel.addDictionary(dictionary);

                LOGGER.info("Firing data table change after addition");
                dictionaryTableModel.fireTableDataChanged();
            });
            registerDictionaryDialog.pack();
            registerDictionaryDialog.setLocationRelativeTo(addButton);
            registerDictionaryDialog.show();
        }
    }

    /**
     * Remove selected dictionary from {@link DictionaryTableModel} of the dictionary table
     */
    private class RemoveDictionaryAction extends AbstractAction {
        public RemoveDictionaryAction() {
            super("Remove", AllIcons.General.Remove);
        }

        @Override
        public void actionPerformed(final ActionEvent e) {
            final int selectedRow = dictionaryTable.getSelectedRow();
            final DictionaryTableModel dictionaryTableModel = (DictionaryTableModel) dictionaryTable.getModel();
            final String selectedDictionaryAlias = dictionaryTableModel.getDictionaryAliasAt(selectedRow);
            LOGGER.info(String.format("Removing dictionary [%s]", selectedDictionaryAlias));
            dictionaryTableModel.removeDictionaryWithAlias(selectedDictionaryAlias);

            LOGGER.info("Firing data table change after removal");
            dictionaryTableModel.fireTableDataChanged();
        }
    }



    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Dictionaries");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:d:grow", "center:max(d;4px):noGrow,top:3dlu:noGrow,center:d:grow"));
        panel1.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        CellConstraints cc = new CellConstraints();
        panel2.add(scrollPane1, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.FILL));
        dictionaryTable = new JBTable();
        scrollPane1.setViewportView(dictionaryTable);
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:noGrow"));
        panel2.add(buttonPanel, cc.xy(1, 1));
        addButton = new JButton();
        addButton.setBorderPainted(true);
        addButton.setContentAreaFilled(true);
        addButton.setText("");
        addButton.setToolTipText("");
        buttonPanel.add(addButton, cc.xy(1, 1));
        removeButton = new JButton();
        removeButton.setBorderPainted(true);
        removeButton.setContentAreaFilled(true);
        removeButton.setText("");
        removeButton.setToolTipText("");
        buttonPanel.add(removeButton, cc.xy(3, 1));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
